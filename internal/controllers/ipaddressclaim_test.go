package controllers

import (
	"context"
	"time"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/utils/pointer"
	clusterv1 "sigs.k8s.io/cluster-api/exp/ipam/api/v1alpha1"
	. "sigs.k8s.io/controller-runtime/pkg/envtest/komega"

	"github.com/telekom/cluster-api-ipam-provider-in-cluster/api/v1alpha1"
)

var _ = Describe("IPAddressClaimReconciler", func() {
	Context("When a new IPAddressClaim is created", func() {
		It("should ignore the claim if it doesn't reference a in-cluster pool", func() {
			// TODO: figure out how to do that properly
		})

		When("the referenced pool exists", func() {
			const poolName = "test-pool"

			BeforeEach(func() {
				pool := v1alpha1.InClusterIPPool{
					ObjectMeta: metav1.ObjectMeta{
						Name:      poolName,
						Namespace: "default",
					},
					Spec: v1alpha1.InClusterIPPoolSpec{
						First:   "10.0.0.1",
						Last:    "10.0.0.254",
						Prefix:  24,
						Gateway: "10.0.0.1",
					},
				}
				Expect(k8sClient.Create(context.Background(), &pool)).To(Succeed())
				Eventually(Get(&pool)).Should(Succeed())
			})

			AfterEach(func() {
				pool := v1alpha1.InClusterIPPool{
					ObjectMeta: metav1.ObjectMeta{
						Name:      poolName,
						Namespace: "default",
					},
				}
				Expect(k8sClient.Delete(context.Background(), &pool)).To(Succeed())
				Eventually(Get(&pool)).Should(Not(Succeed()))
			})

			It("should allocate an Address from the Pool", func() {
				claim := clusterv1.IPAddressClaim{
					TypeMeta: metav1.TypeMeta{
						APIVersion: "ipam.cluster.x-k8s.io/v1alpha1",
						Kind:       "IPAddressClaim",
					},
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test",
						Namespace: "default",
					},
					Spec: clusterv1.IPAddressClaimSpec{
						PoolRef: corev1.TypedLocalObjectReference{
							APIGroup: pointer.String("ipam.cluster.x-k8s.io"),
							Kind:     "InClusterIPPool",
							Name:     poolName,
						},
					},
				}
				address := clusterv1.IPAddress{
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test",
						Namespace: "default",
					},
					Spec: clusterv1.IPAddressSpec{},
				}

				desired := clusterv1.IPAddress{
					ObjectMeta: metav1.ObjectMeta{
						Name:       "test",
						Namespace:  "default",
						Finalizers: []string{ProtectAddressFinalizer},
						OwnerReferences: []metav1.OwnerReference{
							{
								APIVersion:         "ipam.cluster.x-k8s.io/v1alpha1",
								BlockOwnerDeletion: pointer.Bool(true),
								Controller:         pointer.Bool(true),
								Kind:               "IPAddressClaim",
								Name:               "test",
							},
							{
								APIVersion:         "ipam.cluster.x-k8s.io/v1alpha1",
								BlockOwnerDeletion: pointer.Bool(true),
								Controller:         pointer.Bool(false),
								Kind:               "InClusterIPPool",
								Name:               "test-pool",
							},
						},
					},
					Spec: clusterv1.IPAddressSpec{
						ClaimRef: corev1.LocalObjectReference{
							Name: "test",
						},
						PoolRef: corev1.TypedLocalObjectReference{
							APIGroup: pointer.String("ipam.cluster.x-k8s.io"),
							Kind:     "InClusterIPPool",
							Name:     poolName,
						},
						Address: "10.0.0.2",
						Prefix:  24,
						Gateway: "10.0.0.1",
					},
				}

				Expect(k8sClient.Create(context.Background(), &claim)).To(Succeed())
				// Eventually(Object(&claim)).Should(HaveField("Status.Address.Name", Equal(claim.ObjectMeta.Name)))

				Eventually(Object(&address)).WithTimeout(time.Second).WithPolling(100 * time.Millisecond).Should(And(
					EqualObject(&desired, IgnoreAutogeneratedMetadata, IgnorePaths{
						"TypeMeta",
						"ObjectMeta.OwnerReferences[0].UID",
						"ObjectMeta.OwnerReferences[1].UID",
						"Spec.Claim.UID",
						"Spec.Pool.UID",
					}),
				))
			})
		})

		When("the referenced pool uses single ip addresses", func() {
			const poolName = "test-pool"

			BeforeEach(func() {
				pool := v1alpha1.InClusterIPPool{
					ObjectMeta: metav1.ObjectMeta{
						Name:      poolName,
						Namespace: "default",
					},
					Spec: v1alpha1.InClusterIPPoolSpec{
						Addresses: []string{
							"10.0.0.50",
							"10.0.0.128",
						},
						Prefix:  24,
						Gateway: "10.0.0.1",
					},
				}
				Expect(k8sClient.Create(context.Background(), &pool)).To(Succeed())
				Eventually(Get(&pool)).Should(Succeed())
			})

			AfterEach(func() {
				pool := v1alpha1.InClusterIPPool{
					ObjectMeta: metav1.ObjectMeta{
						Name:      poolName,
						Namespace: "default",
					},
				}
				Expect(k8sClient.Delete(context.Background(), &pool)).To(Succeed())
				Eventually(Get(&pool)).Should(Not(Succeed()))
			})

			It("should allocate an Address from the Pool", func() {
				claim := clusterv1.IPAddressClaim{
					TypeMeta: metav1.TypeMeta{
						APIVersion: "ipam.cluster.x-k8s.io/v1alpha1",
						Kind:       "IPAddressClaim",
					},
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test",
						Namespace: "default",
					},
					Spec: clusterv1.IPAddressClaimSpec{
						PoolRef: corev1.TypedLocalObjectReference{
							APIGroup: pointer.String("ipam.cluster.x-k8s.io"),
							Kind:     "InClusterIPPool",
							Name:     poolName,
						},
					},
				}
				address := clusterv1.IPAddress{
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test",
						Namespace: "default",
					},
					Spec: clusterv1.IPAddressSpec{},
				}

				claim2 := clusterv1.IPAddressClaim{
					TypeMeta: metav1.TypeMeta{
						APIVersion: "ipam.cluster.x-k8s.io/v1alpha1",
						Kind:       "IPAddressClaim",
					},
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test-2",
						Namespace: "default",
					},
					Spec: clusterv1.IPAddressClaimSpec{
						PoolRef: corev1.TypedLocalObjectReference{
							APIGroup: pointer.String("ipam.cluster.x-k8s.io"),
							Kind:     "InClusterIPPool",
							Name:     poolName,
						},
					},
				}
				address2 := clusterv1.IPAddress{
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test-2",
						Namespace: "default",
					},
					Spec: clusterv1.IPAddressSpec{},
				}

				desired := clusterv1.IPAddress{
					ObjectMeta: metav1.ObjectMeta{
						Name:       "test",
						Namespace:  "default",
						Finalizers: []string{ProtectAddressFinalizer},
						OwnerReferences: []metav1.OwnerReference{
							{
								APIVersion:         "ipam.cluster.x-k8s.io/v1alpha1",
								BlockOwnerDeletion: pointer.Bool(true),
								Controller:         pointer.Bool(true),
								Kind:               "IPAddressClaim",
								Name:               "test",
							},
							{
								APIVersion:         "ipam.cluster.x-k8s.io/v1alpha1",
								BlockOwnerDeletion: pointer.Bool(true),
								Controller:         pointer.Bool(false),
								Kind:               "InClusterIPPool",
								Name:               "test-pool",
							},
						},
					},
					Spec: clusterv1.IPAddressSpec{
						ClaimRef: corev1.LocalObjectReference{
							Name: "test",
						},
						PoolRef: corev1.TypedLocalObjectReference{
							APIGroup: pointer.String("ipam.cluster.x-k8s.io"),
							Kind:     "InClusterIPPool",
							Name:     poolName,
						},
						Address: "10.0.0.50",
						Prefix:  24,
						Gateway: "10.0.0.1",
					},
				}

				desired2 := clusterv1.IPAddress{
					ObjectMeta: metav1.ObjectMeta{
						Name:       "test-2",
						Namespace:  "default",
						Finalizers: []string{ProtectAddressFinalizer},
						OwnerReferences: []metav1.OwnerReference{
							{
								APIVersion:         "ipam.cluster.x-k8s.io/v1alpha1",
								BlockOwnerDeletion: pointer.Bool(true),
								Controller:         pointer.Bool(true),
								Kind:               "IPAddressClaim",
								Name:               "test-2",
							},
							{
								APIVersion:         "ipam.cluster.x-k8s.io/v1alpha1",
								BlockOwnerDeletion: pointer.Bool(true),
								Controller:         pointer.Bool(false),
								Kind:               "InClusterIPPool",
								Name:               "test-pool",
							},
						},
					},
					Spec: clusterv1.IPAddressSpec{
						ClaimRef: corev1.LocalObjectReference{
							Name: "test",
						},
						PoolRef: corev1.TypedLocalObjectReference{
							APIGroup: pointer.String("ipam.cluster.x-k8s.io"),
							Kind:     "InClusterIPPool",
							Name:     poolName,
						},
						Address: "10.0.0.128",
						Prefix:  24,
						Gateway: "10.0.0.1",
					},
				}

				Expect(k8sClient.Create(context.Background(), &claim)).To(Succeed())
				Expect(k8sClient.Create(context.Background(), &claim2)).To(Succeed())
				// Eventually(Object(&claim)).Should(HaveField("Status.Address.Name", Equal(claim.ObjectMeta.Name)))

				Eventually(Object(&address)).WithTimeout(time.Second).WithPolling(100 * time.Millisecond).Should(And(
					EqualObject(&desired, IgnoreAutogeneratedMetadata, IgnorePaths{
						"TypeMeta",
						"ObjectMeta.OwnerReferences[0].UID",
						"ObjectMeta.OwnerReferences[1].UID",
						"Spec.Claim.UID",
						"Spec.Pool.UID",
					}),
				))
				Eventually(Object(&address2)).WithTimeout(time.Second).WithPolling(100 * time.Millisecond).Should(And(
					EqualObject(&desired2, IgnoreAutogeneratedMetadata, IgnorePaths{
						"TypeMeta",
						"ObjectMeta.OwnerReferences[0].UID",
						"ObjectMeta.OwnerReferences[1].UID",
						"Spec.Claim.UID",
						"Spec.Pool.UID",
					}),
				))
			})
		})

	})
})
